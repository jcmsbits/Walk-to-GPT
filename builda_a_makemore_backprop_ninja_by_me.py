# -*- coding: utf-8 -*-
"""builda_a_makemore_backprop_ninja_by_me.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CmiO63kwShxHEtcymSg_rBIOzxdGyhNf

swole doge style
"""

# there no change in the first several cells from last lecture

# Commented out IPython magic to ensure Python compatibility.
import torch
import torch.nn.functional as F
import matplotlib.pyplot as plt # for making figures
# %matplotlib inline

# read in all the words
words = open('names.txt', 'r').read().splitlines()
print(len(words))
print(max(len(w) for w in words))
print(words[:8])

# build the vocabulary of characters and mappings to/from integers
chars = sorted(list(set(''.join(words))))
stoi = {s:i+1 for i,s in enumerate(chars)}
stoi['.'] = 0
itos = {i:s for s, i in stoi.items()}
vocab_size = len(itos)
print(itos)
print(vocab_size)

# build the dataset
block_size = 3 # context length: how many characters do we take to predict the next one?

def build_dataset(words):
  X, Y = [], []

  for w in words:
    context = [0] * block_size
    for ch in w + '.':
      ix = stoi[ch]
      X.append(context)
      Y.append(ix)
      context = context[1:] + [ix] # crop and append

  X = torch.tensor(X)
  Y = torch.tensor(Y)
  print(X.shape, Y.shape)
  return X, Y

import random
random.seed(42)
random.shuffle(words)
n1 = int(0.8*len(words))
n2 = int(0.9*len(words))

Xtr, Ytr = build_dataset(words[:n1])      # 80%
Xdev, Ydev = build_dataset(words[n1:n2])  # 10%
Xte, Yte = build_dataset(words[n2:])      # 10%

# ok boilerplate done, now we get to the action

# utility function we will use later when comparing manual gradients to Pytorch gradients
def cmp(s, dt,t):
  ex = torch.all(dt == t.grad).item()
  app = torch.allclose(dt, t.grad)
  maxdiff = (dt - t.grad).abs().max().item()
  print(f'{s:15s} | exact: {str(ex):5s} | approximate: {str(app):5s} | maxdiff: {maxdiff}')

n_embd = 10 # the dimensionality of the character embedding vectors
n_hidden = 64 # the number of neurons in the hidden layer of the MLP

g = torch.Generator().manual_seed(2147483647) # for reproducibility
C = torch.randn((vocab_size, n_embd),               generator = g)

# Layer 1
W1 = torch.randn((n_embd * block_size, n_hidden),   generator = g) * (5/3)/((n_embd * block_size)**0.5)
b1 = torch.randn(n_hidden,                          generator = g) * 0.1 # using b1 just for fun, it's useless because because BN
# Layer 2
W2 = torch.randn((n_hidden, vocab_size),            generator = g) * 0.1
b2 = torch.randn((vocab_size),                        generator = g) * 0.1
# BatchNorm parameters
bngain = torch.randn((1, n_hidden)) * 0.1 + 1.0
bnbias = torch.randn((1, n_hidden)) * 0.1

# Note: I am initializating many of these parameters in non-standard ways
# because sometimes initializating with e.g. all zeros could mask an incorrect
# implementation of the backward pass.
parameters = [C, W1, b1, W2, b2, bngain, bnbias]
print(sum(p.nelement() for p in parameters)) # Number of parameters in total
for p in parameters:
  p.requires_grad = True

batch_size = 32
n = batch_size # a shorter variable also, for convenience
# construct a minibatch
ix = torch.randint(0, Xtr.shape[0], (batch_size, ), generator = g)
Xb, Yb = Xtr[ix], Ytr[ix] # batch X,Y

# forward pass, ""chunkated" into smaller steps that are possible to backward one at the time

emb = C[Xb] # embed the characters into vectors
embcat = emb.view(emb.shape[0], -1) # concatenate the vectors
# Linear Layer 1
hprebn = embcat @ W1 + b1 # hidden layer pre-activation
# BatchNorm Layer
bnmeani = 1/n*hprebn.sum(0, keepdim = True) # mean
# Variance
bndiff = hprebn - bnmeani
#print(f'Dimension hprebn {hprebn.shape} y dimension de bnmeani {bnmeani.shape}')
bndiff2 = bndiff**2
bnvar = 1/(n-1) * (bndiff2).sum(0, keepdim = True) # note: Bessel's correction (dividing by n-1, not n)
# ends variance
# Normalization
bnvar_inv = (bnvar + 1e-5)**-0.5
bnraw = bndiff * bnvar_inv
hpreact = bngain * bnraw + bnbias
# Non-Linearity
h = torch.tanh(hpreact) # hidden layer
# Linear layer 2
logits = h @ W2 + b2 # output layer
# cross entropy loss (same as F.cross_entropy(logits, Yb))
logit_maxes = logits.max(1, keepdim = True).values
norm_logits = logits - logit_maxes # subtract max for numerical stability
counts = norm_logits.exp()
counts_sum = counts.sum(1, keepdims = True)
counts_sum_inv = counts_sum**-1 # if I use (1.0 / count_sum) instead then I can't get backprop to be bit exact...
probs = counts * counts_sum_inv
logprobs = probs.log()
# print(logprobs.shape)
loss = -logprobs[range(n), Yb].mean()

# Pytorch backward pass
for p in parameters:
  p.grad = None

for t in [logprobs, probs, counts, counts_sum, counts_sum_inv,  # afaik there is no cleaner way
          norm_logits, logit_maxes, logits, h, hpreact, bnraw,
          bnvar_inv, bnvar, bndiff2, bndiff, hprebn, bnmeani,
          embcat, emb]:
  t.retain_grad()
loss.backward()
print(loss)

# bndiff explination
# a11 a12
# a21 a22
# --->
# b1, b2, where:
# b1 = 1/(n-1)*(a11 + a21)
# b2 = 1/(n-1)*(a12 + a22)

# norm_logits.shape, logits.shape, logit_maxes.shape

# c11 c12 c13 = a11 a12 a13      b1
# c21 c22 c23 = a21 a22 a23  -   b2
# c31 c32 c33 = a31 a32 a32      b3

# so e.g. c32 = a32 - b3

# c = a * b, but with tensors:
# a[3x3] * b[3,1]  -------->
# a11*b1 a12*b1 a13*b1
# a21*b2 a22*b2 a23*b2
# a31*b3 a32b3 a33*b3
# c[3x3]

#logprobs.shape

# counts.shape, counts_sum.shape

# a11 a12 a13   ---> b1 (= a11 + a12 + a13)
# a21 a22 a23   ---> b2 (= a21 + a22 + a23)
# a31 a31 a33   ---> b3 (= a31 + a32 + a33)

# loss = -1/3a + -1/3b + -1/3c
# dloss/da = -1/n

# Exercise 1 : backprop through the whole thing manually,
# backpropagation through exactly all of the variables
# as they are defined in the forward pass above, one by one

# ---------------------
# YOUR CODE HERE :)
# dlogprobs = torch.zeros_like(logprobs)
# dlogprobs[range(n), Yb] = -1.0/n
# # ---------------------
# dprobs = (1.0/probs) * dlogprobs
# dcounts_sum_inv = (counts * dprobs).sum(1, keepdim = True)
# # no se puede verificar dcounts porque depende de otra rama que sale de counts_sum_inv
# dcounts = counts_sum_inv * dprobs
# dcounts_sum = (-counts_sum**-2) * dcounts_sum_inv
# dcounts += torch.ones_like(counts) * dcounts_sum
# dnorm_logist = counts * dcounts
# dlogits = dnorm_logist.clone()
# dlogit_maxes =  (-dnorm_logist).sum(1, keepdim = True)
# dlogits += F.one_hot(logits.max(1).indices, num_classes = logits.shape[1]) * dlogit_maxes
# dh = dlogits @ W2.T
# dW2 = h.T @ dlogits
# db2 = dlogits.sum(0)
# dhpreact = (1.0 - h**2) * dh
# dbnbias = dhpreact.sum(0, keepdim=True)
# dbngain = (dhpreact * bnraw).sum(0, keepdim = True)
# dbnraw = bngain * dhpreact
# dbndiff = dbnraw * bnvar_inv
# dbnvar_inv = (bndiff * dbnraw).sum(0, keepdim = True)
# dbnvar = -0.5*(bnvar + 1e-5)**-1.5 * dbnvar_inv
# dbndiff2 = (torch.ones_like(bndiff2) * (1/(n-1))) * dbnvar
# dbndiff += (2*bndiff) * dbndiff2
# dhprebn = dbndiff.clone()
# dbnmeani = (-dbndiff.clone()).sum(0, keepdim = True)
# dhprebn += 1/n * torch.ones_like(hprebn) *  dbnmeani
# dembcat = dhprebn @ W1.T
# dW1 = embcat.T @ dhprebn
# db1 = dhprebn.clone().sum(0)
# demb = dembcat.view(emb.shape)

# dC = torch.zeros_like(C)
# for k in range(Xb.shape[0]):
#   for j in range(Xb.shape[1]):
#     ix = Xb[k, j]
#     dC[ix] += demb[k,j]



# cmp('logprobs', dlogprobs, logprobs)
# cmp('probs', dprobs, probs)
# cmp('counts_sum_inv', dcounts_sum_inv, counts_sum_inv)
# cmp('counts_sum', dcounts_sum, counts_sum)
# cmp('counts', dcounts, counts)
# cmp('norm_logits', dnorm_logist, norm_logits)
# cmp('logit_maxes', dlogit_maxes, logit_maxes)
# cmp('logits', dlogits, logits)
# cmp('h', dh, h)
# cmp('W2', dW2, W2)
# cmp('b2', db2, b2)
# cmp('hpreact', dhpreact, hpreact)
# cmp('bngain', dbngain, bngain)
# cmp('bnbias', dbnbias, bnbias)
# cmp('bnraw', dbnraw, bnraw)
# cmp('bnvar_inv', dbnvar_inv, bnvar_inv)
# cmp('bnvar', dbnvar, bnvar)
# cmp('bndiff2', dbndiff2, bndiff2)
# cmp('bndiff', dbndiff, bndiff)
# cmp('bnmeani', dbnmeani, bnmeani)
# cmp('hprebn', dhprebn, hprebn)
# cmp('embcat', dembcat, embcat)
# cmp('W1', dW1, W1)
# cmp('b1', db1, b1)
# cmp('emb', demb, emb)
# cmp('C', dC, C)

# Exercise 2: backprop through cross_entropy but all in one go
# to complete this challenge look at the mathematical expression of the loss,
# take the derivate, simplify the expression, and just write it out

# forward pass

# before:
# logit_maxes = logits.max(1, keepdim=True).values
# norm_logits = logits - logit_maxes # subtract max for numerical stability
# counts = norm_logits.exp()
# counts_sum = counts.sum(1, keepdim=True)
# counts_sum_inv = counts_sum**-1 # if I use (1.0 / counts_sum) instead then I can't get backprop to be bit exact...
# probs = counts * counts_sum_inv
# logprobs = probs.log()
# loss = -logprobs[range(n),Yb].mean()

# now:
loss_fast = F.cross_entropy(logits, Yb)
print(loss_fast.item(), 'diff:', (loss_fast - loss).item())

# # backward pass
dlogits = F.softmax(logits, 1)
dlogits[range(n), Yb] -= 1
dlogits /= n

# # ----------------------------
# # YOUR CODE HERE :)
# # ----------------------------

cmp('logits', dlogits, logits)  # I can only get approximate to be true, my maxdiff is 6e-9

# # Exercise 3:  backprop through batchnorm but all in one go
# # to complete this challenge look at the mathematical expression of the output of batchnorm,
# # take the derivate w.r.t its input, simplify the expression, and just write it out

# # forward pass

# before:
# bnmeani = 1/n*hprebn.sum(0, keepdim = True)
# bndiff = bprebn - bnmeani
# bndiff2 = bndiff**2
# bnvar = 1/(n-1) * (bndiff2).sum(0, keepdim = True ) # note: Bessel's correction (dividing by n-1, not n)
# bnvar_inv = (bnvar + 1e-5)**-0.5
# bnraw = bndiff * bnvar_inv
# hpreact = bngain * bnraw + bnbias

# # now:
# # batch_norm uses biased variance, so sadly just calling this doesn't work:
# # hpreact2 = F.batch_norm(hprebn, None, None, bngain, bnbias, training = True)
# # sadly unresolved, apparently: https://github.com/pytorch/pytorch/issues/19902
# # so instead implementing the correct forward pass here explicitly but on one line:
# hpreact_fast = bngain * (hprebn - hprebn.mean(0, keepdim = True)) / torch.sqrt(hprebn.var(0, keepdim = True, unbiased=True) + 1e-5) + bnbias
# print(hpreact_fast, 'max diff:', (hpreact_fast - hpreact).abs().max())

# # backward pass, just implement dhprebn, ignore the gamma and beta, which we ha've derived already in Exercise 1

# # ------------------------------
# # YOUR CODE HERE :)
# # ------------------------------
dhprebn = bngain * bnvar_inv * (n * dhpreact - dhpreact.sum(0) - n/(n-1)*bnraw*(dhpreact*bnraw).sum(0))

cmp('hprebn', dhprebn, hprebn) # I can only get approximate to be true, my maxdiff is 9e-10

# # Exercise 4: putting it all together!
# # Train the MLP neural net with your own backward pass

# # init
# n_embd = 10 # the dimensionality of the character embedding vectors
# n_hidden = 200 # the number of neurons in the hidden layer of the MLP

# g = torch.Generator().manual_seed(2147483647) # for reproducibility
# C = torch.randn((vocab_size, n_embd),               generator = g)
# # Layer 1
# W1 = torch.randn((n_embd * block_size, n_hidden),   generator = g) * (5/3) / ((n_embd * block_size) ** 0.5)
# b1 = torch.randn(n_hidden                       ,   generator = g) * 0.1
# # Layer 2
# W2 = torch.randn((n_hidden, vocab_size),            generator = g) * 0.1
# b2 = torch.randn(vocab_size,                     generator = g) * 0.1
# # BatchNorm parameters
# bngain = torch.randn((1, n_hidden)) * 0.1 + 1.0
# bnbias = torch.randn((1, n_hidden)) * 0.1

# parameters = [C, W1, b1, W2, b2, bngain, bnbias]
# print(sum(p.nelement() for p in parameters))  # number of parameters in total
# for p in parameters:
#   p.requires_grad = True

# # same optimization as last time
# max_steps = 200000
# batch_size = 32
# n = batch_size # convenience
# lossi = []

# # use this context manager for efficiency once your backward pass is written (TODO)
# # with torch.no_grad():

# # kick off optimization
# for i in range(max_steps):
#   # minibatch construct
#   ix = torch.randint(0, Xtr.shape[0], (batch_size,), generator = g)
#   Xb, Yb = Xtr[ix], Ytr[ix] # batch, X, Y
#   # forward pass
#   emb = C[Xb] # embed the characters into vectors
#   embcat = emb.view(emb.shape[0], -1)  # concatenate the vectors
#   # Linear layer 1
#   hprebn = embcat @ W1 + b1 # hidden layer pre-activation
#   # BatchNorm layer
#   # ----------------------------------------------------------------------------
#   bnmean = hprebn.mean(0, keepdim = True)
#   bnvar = hprebn.var(0, keepdim = True, unbiased = True)
#   bnvar_inv = (bnvar + 1e-5) ** -0.5
#   bnraw = (hprebn - bnmean) * bnvar_inv
#   hpreact = bngain * bnraw + bnbias
#   # ----------------------------------------------------------------------------
#   # Non-linearity
#   h = torch.tanh(hpreact)  # hidden layer
#   logits = h @ W2 + b2 # output layer
#   loss = F.cross_entropy(logits, Yb)  # loss function

#   # backward pass
#   for p in parameters:
#     p.grad = None
#   loss.backward() # use this for correctness comparisons, delete it later!

#   # manual backprop! # swole_doge_meme
#   # ----------------------------------------------------------------------------
#   # YOUR CODE HERE :)
#   dC, dW1, db1, dW2, db2, dbngain, dbnbias = None, None, None, None, None, None, None
#   grads = [dC, dW1, db1, dW2, db2, dbngain, dbnbias]
#   # ----------------------------------------------------------------------------

#   # update
#   lr = 0.1 if i < 100000 else 0.01  # step learning rate decay
#   for p, grad in zip(parameters, grads):
#     p.data += -lr * p.grad # old way of cheems (using Pytorch grad from .backward())
#     # p.data += -lr * grad # new way of swole doge TODO: enable

#   # track stats
#   if i % 10000 == 0: # print every once in a while
#     print(f'{i:7d}/{max_steps:7d}: {loss.item():.4f}')
#   lossi.append(loss.log10().item())

#   if i >= 100: # TODO: delete early breaking when you're ready to train the full net
#     break

# # useful for checking your gradients
# # for p, g in zip(parameters, grads):
# # cmp(str(tuple(p.shape)), g, p)

# # calibrate the batch norm at the end of training

# with torch.no_grad():
#   # pass the training set through
#   emb = C[Xtr]
#   embcat = emb.view(emb.shape[0], -1)
#   hpreact = embcat @ W1 + b1
#   # measure the mean/std over the entire training set
#   bnmean = hpreact.mean(0, keepdim = True)
#   bnvar = hpreact.var(0, keepdim = True, unbiased = True)

# # evaluate train and val loss
# @torch.no_grad() # this decorator disables gradient tracking
# def split_loss(split):
#   x,y = {
#       'train': (Xtr, Ytr),
#       'val'  : (Xdev, Ydev),
#       'test' : (Xte, Yte),
#   }[split]
#   emb = C[x] # (N, block_size, n_embd)
#   embcat = emb.view(emb.shape[0], -1)   # concat into (N, block_size * n_embd)
#   hpreact = embcat @ W1 + b1
#   hpreact = bngain * (hpreact - bnmean) * (bnvar + 1e-5) ** -0.5 + bnbias
#   h = torch.tanh(hpreact) # (N, n_hidden)
#   logits = h @ W2 + b2 # (N, vocab_size)
#   loss = F.cross_entropy(logits, y)
#   print(split, loss.item())

# split_loss('train')
# split_loss('val')

# # I achieved:
# # train 2.0718822479248047
# # val 2.1162495613094145